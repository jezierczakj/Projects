@page "/item"
@page "/item/{id:int}"
@inject IItemService ItemService

@if(Id == null)
{
	<PageTitle>Create a new Item</PageTitle>
	<h3>Create a new Item</h3>
}
else
{
	<PageTitle>Edit @item.Color</PageTitle>
	<h3>Edit @item.Color</h3>
}
<EditForm Model="item" OnSubmit="HandleSubmit">
	<DataAnnotationsValidator />
	<div>
		<label for="name">Name</label>
		<InputText id="name" @bind-Value="item.Name" class="form-control"></InputText>
	</div>
	<div>
		<label for="material">Material</label>
		<InputText id="material" @bind-Value="item.Material" class="form-control"></InputText>
	</div>
	<div>
		<label for="color">Color</label>
		<InputText id="color" @bind-Value="item.Color" class="form-control"></InputText>
	</div>
	<div>
		<label>Category</label><br/>
		<InputSelect @bind-Value="item.CategoryId" class="form-select">
			@foreach(var category in ItemService.Categories)
			{
				<option value="@category.Id">@category.Name</option>
			}
		</InputSelect>
	</div>
	<br />
	<button type="submit" class="btm btn-primary"> @btnText</button>
	<button type="button" class="btm btn-danger" @onclick="DeleteItem">Delete Item</button>
	<ValidationSummary />
</EditForm>

@code {
	[Parameter]
	public int? Id { get; set; }

	string btnText = string.Empty;

	Item item = new Item { Category = new Category() };

	protected override async Task OnInitializedAsync()
	{
		btnText = Id == null ? "Save New Item" : "Update Item";
		await ItemService.GetCategory();
	}

	protected override async Task OnParametersSetAsync()
	{
		if (Id == null)
		{
			item.Category = ItemService.Categories[0];
			item.CategoryId = item.Category.Id;
		}
		else
		{
			item = await ItemService.GetSingleItem((int)Id);
		}
	}
	async Task HandleSubmit()
	{
		if(Id == null)
		{
			await ItemService.CreateItem(item);
		}
		else
		{
			await ItemService.UpdateItem(item);
		}
	}
	async Task DeleteItem()
	{
		await ItemService.DeleteItem(item.Id);
	}
}
